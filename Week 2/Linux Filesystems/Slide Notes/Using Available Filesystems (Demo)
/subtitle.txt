At any given time, you can see what filesystems your system currently understands by doing "cat /proc/filesystems". Let's pipe that into "less". The "nodev" ones are so-called pseudo-filesystems, but then, we see more conventional ones down here, like "ext3", "btrfs", "fuse", "ext4", etc. You will notice that "xfs" was not on the list, and the kernel would understand how to do it if we were to load it as a module, but it is not currently built into the system. So, let's see what happens if we try to prepare and mount an "xfs" filesystem. In order to do that, we will use the loopback mechanism that we discussed and employed in detail when we talked about partitioning. So, first let's create a container for the filesystem. So do "dd if=/dev/zero", to fill it with zeros. "of=junk" just to give any name, "bs=1M count=512". So, we'll make a 512 megabyte file full of zeros. And now, we'll put a filesystem on it with "mkfs.xfs junk". And that seems to have worked just fine, and now we will mount it. So, I'll do "sudo mount junk /mnt". Notice we did not have to say what type of filesystem it is. Mount was able to figure it out by examining what's actually in "junk". Furthermore, we didn't have to specify "-o loop". The system is smart enough to figure out this was a loopback file, and we didn't have to explicitly say it. So if I do "df", you'll see there it is. It's mounted on "/mnt". Not much of it is being used. If I do "cat /proc/filesystems" now, we'll see "xfs" is now understood. And if I do "lsmod", we'll see that the "xfs" module is loaded now. I should have shown you it was not loaded before we tried to mount an "xfs" filesystem, but it was indeed not. So, that's how the system can dynamically expand its list of known filesystem types upon demand.