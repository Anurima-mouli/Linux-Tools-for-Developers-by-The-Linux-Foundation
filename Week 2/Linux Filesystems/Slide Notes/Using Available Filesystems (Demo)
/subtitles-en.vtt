WEBVTT

1
00:00:00.000 --> 00:00:01.770
At any given time,

2
00:00:01.770 --> 00:00:05.370
you can see what filesystems your system currently

3
00:00:05.370 --> 00:00:11.865
understands by doing "cat /proc/filesystems".

4
00:00:11.865 --> 00:00:16.050
Let's pipe that into "less". The "nodev" ones are

5
00:00:16.050 --> 00:00:21.879
so-called pseudo-filesystems, but then, we see more conventional ones down here,

6
00:00:21.879 --> 00:00:28.480
like "ext3", "btrfs", "fuse", "ext4", etc.

7
00:00:29.670 --> 00:00:35.030
You will notice that "xfs" was not on the list, and the kernel would

8
00:00:35.030 --> 00:00:37.380
understand how to do it if we were to load it as

9
00:00:37.380 --> 00:00:40.880
a module, but it is not currently built into the system.

10
00:00:40.880 --> 00:00:46.415
So, let's see what happens if we try to prepare and mount an "xfs" filesystem.

11
00:00:46.415 --> 00:00:49.610
In order to do that, we will use the loopback mechanism that we

12
00:00:49.610 --> 00:00:53.825
discussed and employed in detail when we talked about partitioning.

13
00:00:53.825 --> 00:00:57.470
So, first let's create a container for the filesystem.

14
00:00:57.470 --> 00:01:02.065
So do "dd if=/dev/zero", to fill it with zeros.

15
00:01:02.065 --> 00:01:10.760
"of=junk" just to give any name, "bs=1M count=512".

16
00:01:10.760 --> 00:01:15.410
So, we'll make a 512 megabyte file full of zeros.

17
00:01:15.410 --> 00:01:22.560
And now, we'll put a filesystem on it

18
00:01:22.560 --> 00:01:32.050
with "mkfs.xfs junk".

19
00:01:32.050 --> 00:01:37.220
And that seems to have worked just fine, and now we will mount it.

20
00:01:37.220 --> 00:01:43.090
So, I'll do "sudo mount junk /mnt".

21
00:01:43.090 --> 00:01:47.235
Notice we did not have to say what type of filesystem it is.

22
00:01:47.235 --> 00:01:52.095
Mount was able to figure it out by examining what's actually in "junk".

23
00:01:52.095 --> 00:01:55.460
Furthermore, we didn't have to specify "-o loop".

24
00:01:55.460 --> 00:01:57.845
The system is smart enough to figure out

25
00:01:57.845 --> 00:02:02.510
this was a loopback file, and we didn't have to explicitly say it.

26
00:02:02.510 --> 00:02:04.675
So if I do "df",

27
00:02:04.675 --> 00:02:06.210
you'll see there it is.

28
00:02:06.210 --> 00:02:07.830
It's mounted on "/mnt".

29
00:02:07.830 --> 00:02:09.930
Not much of it is being used.

30
00:02:09.930 --> 00:02:16.920
If I do "cat /proc/filesystems" now,

31
00:02:16.920 --> 00:02:23.075
we'll see "xfs" is now understood. And if I do "lsmod",

32
00:02:23.075 --> 00:02:27.140
we'll see that the "xfs" module is loaded now.

33
00:02:27.140 --> 00:02:32.915
I should have shown you it was not loaded before we tried to mount an "xfs" filesystem,

34
00:02:32.915 --> 00:02:34.900
but it was indeed not.

35
00:02:34.900 --> 00:02:38.359
So, that's how the system can dynamically expand

36
00:02:38.359 --> 00:02:42.600
its list of known filesystem types upon demand.