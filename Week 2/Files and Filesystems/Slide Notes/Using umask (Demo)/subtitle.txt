Let's get some experience with understanding what "umask" does. So, to see what the default "umask" is on your account, just type "umask", and we see it's "0002". Now, if we didn't have a "mask" set when we created a file, it would be created with "666" permission. So, that is read-write permission for user, group, and other, or world. So, let's make a file and see what it looks like. So, let me remove it in case it's there. We're going to do this a few times. "rm -f afile ; touch afile ; ls -l afile". So, you see the permissions are: "-rw-rw-r--". So, the two there, they knocked out the write permission on other, because it's the last field there. Likewise, if I did "touch", let's change the "umask", let's say "umask 0022", it should remove write permission from group now. So, let's create the file and look at it again. You see, that is exactly what it did. It's "-rw-r--r--". Now, you can also do this in symbolic forms. So, I could do, for instance, "umask -S", and you see, it's telling me, "u=rwx", "g=rx", and "o=rx". We are not getting any execute permissions on the files, because the default "mask" that files are created with, is "666", not "777". And I can also change the "umask" by specifying it in that more complicated format like, that we use for change mods. So, I could do "umask", and I could say, "u=r", "g=w", "o=rw", let's say. And then I look at the "mask" again. And the new files created exactly that: user read-only, group write-only, and owner read-write. So, that's a little bit of explanation of how you can play with "umask".